package internal

import (
	"fmt"
	"io"

	"github.com/samber/lo"
)

type Builder struct {
	packagee string
	structs  []Struct
}

type Struct struct {
	name   string
	fields []Field
}

type Field struct {
	name    string
	typee   string
	options Options
}

type Options struct {
	skip bool
}

type Generator struct {
	errOnWrite error
}

func NewGenerator() Generator {
	return Generator{}
}

func (g *Generator) Generate(b []Builder, dest io.Writer) error {
	if len(b) == 0 {
		return nil
	}

	g.print(dest, "package %s\n\n", b[0].packagee)

	g.print(dest, "// Code generated by builder tool. DO NOT EDIT.\n\n")

	for _, b := range b {
		for _, s := range b.structs {
			desiredFields := lo.Filter(s.fields, func(f Field, _ int) bool {
				return !f.options.skip
			})

			g.print(dest, "type %sBuilder interface {\n", s.name)
			for _, f := range desiredFields {
				g.print(dest, "    %s(%s %s) %sBuilder\n", f.name, f.name, f.typee, s.name)
			}
			g.print(dest, "    Build() %s\n", s.name)
			g.print(dest, "}\n\n")

			g.print(dest, "type %sBuilderImpl struct {\n", s.name)
			g.print(dest, "    %s %s\n", s.name, s.name)
			g.print(dest, "}\n\n")

			g.print(dest, "func New%sBuilder() %sBuilder {\n", s.name, s.name)
			g.print(dest, "    return &%sBuilderImpl{}\n", s.name)
			g.print(dest, "}\n\n")

			g.print(dest, "func (b *%sBuilderImpl) Build() %s {\n", s.name, s.name)
			g.print(dest, "    return b.%s\n", s.name)
			g.print(dest, "}\n\n")

			for _, f := range desiredFields {
				g.print(dest, "func (b *%sBuilderImpl) %s(%s %s) %sBuilder {\n", s.name, f.name, f.name, f.typee, s.name)
				g.print(dest, "    b.%s.%s = %s\n", s.name, f.name, f.name)
				g.print(dest, "    return b\n")
				g.print(dest, "}\n\n")
			}
		}
	}

	return g.errOnWrite
}

func (g *Generator) print(dest io.Writer, format string, a ...any) {
	if g.errOnWrite != nil {
		return
	}
	_, g.errOnWrite = fmt.Fprintf(dest, format, a...)
}
